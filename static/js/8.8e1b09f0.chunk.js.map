{"version":3,"sources":["containers/Home/AiTrainer/AiTrainer.module.scss","containers/Home/AiTrainer/AiTrainer.tsx"],"names":["module","exports","connect","state","currentSearchId","current","searchId","searches","mainBrand","brands","sentimentDriversWidget","widgets","sentimentDrivers","updateSearchExcludedSuggestions","actions","setIsGlobalPreloaderShown","useContext","context","useState","currentClasterIndex","setCurrentClasterIndex","isSearchBeingRecalculated","setIsSearchBeingRecalculated","currentSearch","useMemo","find","id","excludedKeywords","suggestions","name","excluded","joinedExcludedKeywords","sort","join","lastJoinedExcludedKeywords","useRef","clusters","Object","values","reduce","acc","item","positiveClusters","parseClusters","negativeClusters","type","map","word","relatedWords","filter","RegExp","test","useEffect","watchSearch","doc","Boolean","recalculatingWidgets","prevIsSearchBeingRecalculated","usePrevious","handleClickKeyword","keyword","a","toggleArrayValue","console","dir","notify","show","postSearchRecalculationRequest","className","styles","aiTrainer","content","title","description","image","length","leftBox","boxTitle","dimmedText","buttonArrow","onClick","prevClasterIndex","style","transform","size","wordTilesWrapper","i","wordTileLeftBox","clickHandler","undefined","sign","placeholder","rightBox","wordTileRightBox","buttonRecalculate"],"mappings":"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","file":"static/js/8.8e1b09f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"aiTrainer\":\"AiTrainer_aiTrainer__PqTha\",\"content\":\"AiTrainer_content__3Sbct\",\"title\":\"AiTrainer_title__1I2OC\",\"description\":\"AiTrainer_description__1pQKN\",\"image\":\"AiTrainer_image__4k9VL\",\"leftBox\":\"AiTrainer_leftBox__2IvLe\",\"rightBox\":\"AiTrainer_rightBox__16ge0\",\"boxTitle\":\"AiTrainer_boxTitle__3mgzt\",\"dimmedText\":\"AiTrainer_dimmedText__2xi9l\",\"wordTilesWrapper\":\"AiTrainer_wordTilesWrapper__2Pauy\",\"wordTileLeftBox\":\"AiTrainer_wordTileLeftBox__27m_l\",\"wordTileRightBox\":\"AiTrainer_wordTileRightBox__2pCBa\",\"placeholder\":\"AiTrainer_placeholder__3eISt\",\"buttonClose\":\"AiTrainer_buttonClose__1XTyr\",\"buttonArrow\":\"AiTrainer_buttonArrow__nzhbJ\",\"buttonRecalculate\":\"AiTrainer_buttonRecalculate__2WsWW\"};","import React, { useContext, useState, useMemo, useEffect, useRef } from \"react\";\r\nimport styles from \"./AiTrainer.module.scss\";\r\nimport context from \"../../../context\";\r\nimport { connect } from \"react-redux\";\r\nimport { Image, WordTile } from \"../../../components\";\r\nimport { Triangle } from \"../../../assets/icons\";\r\nimport { notify } from \"react-notify-toast\";\r\nimport * as actions from \"../../../store/actions\";\r\nimport { toggleArrayValue } from \"../../../utils\";\r\nimport {\r\n  postSearchRecalculationRequest,\r\n  watchSearch,\r\n} from \"../../../store/api\";\r\nimport { usePrevious } from \"../../../hooks\";\r\n\r\ninterface Props {\r\n  currentSearchId: Store.Current[\"searchId\"];\r\n  searches: Store.Searches;\r\n  mainBrand: Store.Brands[number];\r\n  sentimentDriversWidget: Store.Widgets[\"sentimentDrivers\"];\r\n  updateSearchExcludedSuggestions: typeof actions.updateSearchExcludedSuggestions;\r\n}\r\n\r\nconst AiTrainer = ({\r\n  currentSearchId,\r\n  searches,\r\n  mainBrand,\r\n  sentimentDriversWidget,\r\n  updateSearchExcludedSuggestions,\r\n}: Props) => {\r\n  const { setIsGlobalPreloaderShown } = useContext(context);\r\n\r\n  const [currentClasterIndex, setCurrentClasterIndex] = useState(0);\r\n  const [isSearchBeingRecalculated, setIsSearchBeingRecalculated] = useState(\r\n    false\r\n  );\r\n\r\n  const currentSearch = useMemo(\r\n    () => searches.find(({ id }) => id === currentSearchId),\r\n    [searches, currentSearchId]\r\n  );\r\n\r\n  // const excludedKeywords = useMemo(() => currentSearch?.keywords.excluded || [], [currentSearch]);\r\n  const excludedKeywords = useMemo(\r\n    () => currentSearch?.suggestions[mainBrand.name]?.excluded || [],\r\n    [currentSearch, mainBrand.name]\r\n  );\r\n\r\n  const joinedExcludedKeywords = () => [...excludedKeywords].sort().join(\"\");\r\n\r\n  const lastJoinedExcludedKeywords = useRef(joinedExcludedKeywords());\r\n\r\n  const clusters = useMemo(() => {\r\n    return Object.values(sentimentDriversWidget).reduce((acc, item) => {\r\n      const positiveClusters = parseClusters(\"positive\", item);\r\n      const negativeClusters = parseClusters(\"negative\", item);\r\n\r\n      return [...acc, ...positiveClusters, ...negativeClusters];\r\n    }, [] as string[][]);\r\n\r\n    function parseClusters(\r\n      type: \"positive\" | \"negative\",\r\n      item?: SentimentDrivers.Item\r\n    ) {\r\n      return (\r\n        item?.values[mainBrand.id]?.[type]?.map(({ word, relatedWords }) =>\r\n          [word, ...relatedWords].filter(\r\n            (word) => !new RegExp(word, \"i\").test(excludedKeywords.join(\"\"))\r\n          )\r\n        ) || []\r\n      );\r\n    }\r\n  }, [sentimentDriversWidget, mainBrand.id, excludedKeywords]);\r\n\r\n  useEffect(() => {\r\n    const stopSearchWatcher = watchSearch(currentSearchId, (doc) => {\r\n      setIsSearchBeingRecalculated(Boolean(doc?.recalculatingWidgets));\r\n    });\r\n\r\n    return stopSearchWatcher;\r\n  }, [currentSearchId]);\r\n\r\n  const prevIsSearchBeingRecalculated = usePrevious(isSearchBeingRecalculated);\r\n\r\n  useEffect(() => {\r\n    if (isSearchBeingRecalculated === prevIsSearchBeingRecalculated) return;\r\n\r\n    isSearchBeingRecalculated\r\n      ? notify.show(\r\n          \"This search is currently being recalculated. You will be able to edit the words again, once it is done\",\r\n          \"warning\",\r\n          7500\r\n        )\r\n      : notify.show(\"Now you are able to edit the words\", \"success\", 5000);\r\n  }, [isSearchBeingRecalculated, prevIsSearchBeingRecalculated]);\r\n\r\n  async function handleClickKeyword(keyword: string) {\r\n    try {\r\n      await updateSearchExcludedSuggestions(\r\n        currentSearchId,\r\n        toggleArrayValue(excludedKeywords, keyword)\r\n      );\r\n    } catch (error) {\r\n      console.dir(error);\r\n      notify.show(\"Oops, something went wrong\", \"error\");\r\n    }\r\n  }\r\n\r\n  async function handleClickRecalculate() {\r\n    setIsGlobalPreloaderShown(true);\r\n    try {\r\n      await postSearchRecalculationRequest(currentSearchId);\r\n      lastJoinedExcludedKeywords.current = joinedExcludedKeywords();\r\n    } catch (error) {\r\n      console.dir(error);\r\n      notify.show(\"Oops, something went wrong\", \"error\");\r\n    }\r\n    setIsGlobalPreloaderShown(false);\r\n  }\r\n\r\n  return (\r\n    <div className={styles.aiTrainer}>\r\n      <div className={styles.content}>\r\n        <div className={styles.title}>Train your AI</div>\r\n        <div className={styles.description}>\r\n          In order to increase the quality of words related to your brand we\r\n          sometimes need to teach our AI to pick the right words. First we order\r\n          by category clusters and then refine the search to fit you.\r\n          <Image className={styles.image} name=\"birdAI\" />\r\n        </div>\r\n        {!!clusters.length && (\r\n          <div className={styles.leftBox}>\r\n            <div className={styles.boxTitle}>\r\n              <div>\r\n                <span className={styles.dimmedText}>WORD CLUSTER</span>{\" \"}\r\n                <b>{currentClasterIndex + 1}</b>{\" \"}\r\n                <span className={styles.dimmedText}>OF</span>{\" \"}\r\n                <b>{clusters.length}</b>\r\n              </div>\r\n              <div>\r\n                <button\r\n                  className={styles.buttonArrow}\r\n                  onClick={() =>\r\n                    setCurrentClasterIndex((prevClasterIndex) =>\r\n                      prevClasterIndex === 0\r\n                        ? clusters.length - 1\r\n                        : --prevClasterIndex\r\n                    )\r\n                  }\r\n                >\r\n                  <Triangle style={{ transform: \"rotate(-90deg)\" }} size={10} />\r\n                </button>\r\n                <button\r\n                  className={styles.buttonArrow}\r\n                  onClick={() =>\r\n                    setCurrentClasterIndex((prevClasterIndex) =>\r\n                      prevClasterIndex === clusters.length - 1\r\n                        ? 0\r\n                        : ++prevClasterIndex\r\n                    )\r\n                  }\r\n                >\r\n                  <Triangle style={{ transform: \"rotate(90deg)\" }} size={10} />\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className={styles.wordTilesWrapper}>\r\n              {clusters[currentClasterIndex] &&\r\n                (clusters[currentClasterIndex]!.length ? (\r\n                  clusters[currentClasterIndex]!.map((keyword, i) => (\r\n                    <WordTile\r\n                      className={styles.wordTileLeftBox}\r\n                      word={keyword}\r\n                      clickHandler={\r\n                        !isSearchBeingRecalculated\r\n                          ? () => handleClickKeyword(keyword)\r\n                          : undefined\r\n                      }\r\n                      sign={!isSearchBeingRecalculated ? \"plus\" : undefined}\r\n                      key={i}\r\n                    />\r\n                  ))\r\n                ) : (\r\n                  <div className={styles.placeholder}>\r\n                    All words of this cluster have been deselected\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className={styles.rightBox}>\r\n          <div className={styles.boxTitle}>\r\n            <div>\r\n              <span className={styles.dimmedText}>Here are the words you </span>{\" \"}\r\n              <b>don't</b>{\" \"}\r\n              <span className={styles.dimmedText}>think relate to brand</span>{\" \"}\r\n              <b>{mainBrand.name}</b>\r\n            </div>\r\n          </div>\r\n          <div className={styles.wordTilesWrapper}>\r\n            {excludedKeywords.length ? (\r\n              excludedKeywords.map((keyword, i) => (\r\n                <WordTile\r\n                  className={styles.wordTileRightBox}\r\n                  word={keyword}\r\n                  clickHandler={\r\n                    !isSearchBeingRecalculated\r\n                      ? () => handleClickKeyword(keyword)\r\n                      : undefined\r\n                  }\r\n                  sign={!isSearchBeingRecalculated ? \"minus\" : undefined}\r\n                  key={i}\r\n                />\r\n              ))\r\n            ) : (\r\n              <div className={styles.placeholder}>\r\n                No words have been deselected yet\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {joinedExcludedKeywords() !== lastJoinedExcludedKeywords.current &&\r\n        !isSearchBeingRecalculated && (\r\n          <button\r\n            className={styles.buttonRecalculate}\r\n            onClick={handleClickRecalculate}\r\n          >\r\n            Recalculate search {currentSearch ? `\"${currentSearch.name}\"` : \"\"}\r\n          </button>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: Store.State) => ({\r\n  currentSearchId: state.current.searchId,\r\n  searches: state.searches,\r\n  mainBrand: state.brands[0]!,\r\n  sentimentDriversWidget: state.widgets.sentimentDrivers,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  updateSearchExcludedSuggestions: actions.updateSearchExcludedSuggestions,\r\n})(AiTrainer);\r\n"],"sourceRoot":""}