{"version":3,"sources":["features/searches/Search.module.scss","features/searches/SearchNameModal.module.scss","features/searches/WordSelector.module.scss","features/searches/SearchTable.module.scss","features/searches/WordSelector.tsx","features/searches/SearchNameModal.tsx","features/searches/SearchTable.tsx","features/searches/Search.tsx","features/searches/SearchesPage.tsx"],"names":["module","exports","WordType","InputWithError","withError","Input","SearchNameModal","props","useState","initialSearchName","searchName","setSearchName","useTemporaryErrors","errors","setErrors","className","styles","searchNameModal","label","inputWrapper","input","value","changeHandler","error","greenButton","onClick","trimmedSearchName","trim","onNextClicked","dndProviderBackend","isTouchDevice","TouchBackend","HTML5Backend","WordTile","forwardRef","ref","word","style","title","onDeleteClicked","WordsArea","children","DraggableWordTile","withDrag","DroppableWordsArea","withDrop","WordSelector","words","onWordStatusChanged","status","isLoaded","unusedWords","unused","includedWords","included","excludedWords","excluded","includedWord","setIncludedWord","excludedWord","setExcludedWord","onDeleteWordClicked","type","index","call","filter","_","i","onWordDropped","areaType","wordIndex","Number","id","DndProvider","backend","cx","wordSelector","wordsArea","wordsAreaBig","accept","Included","Excluded","onDropped","item","Unused","preloader","length","wordsWrapper","map","String","message","wordsAreaSmall","borderColor","undefined","row","onSubmit","e","preventDefault","placeholder","maxLength","plusButton","disabled","size","opacity","SearchTable","columns","rows","hasFilter","filteringFields","hasRowSelection","selectedRowIds","onSelectedRowIdsChanged","hasRowDeletion","onRowDeleted","noRowsText","setFilter","filteredRows","useMemo","filterInLowerCase","toLowerCase","reduce","acc","field","includes","sorting","setSorting","sortedRows","direction","sort","a","b","valueA","valueB","localeCompare","isNaN","page","setPage","pageQuantity","Math","ceil","pageRows","slice","useEffect","isEachPageRowSelected","every","toHTML","toLocaleString","filterIcon","main","tableWrapper","width","fontSize","checkboxIcon","color","omit","newSelectedRowIds","forEach","isSortable","isSqueezed","cursor","previousDirection","onSortableFieldClicked","sortingIcon","sortingIconDown","fields","trashIcon","k","isDate","isExpandable","expandableCell","dangerouslySetInnerHTML","__html","formatDistanceToNow","addSuffix","warning","paginationWrapper","previousLabel","nextLabel","breakLabel","pageCount","marginPagesDisplayed","pageRangeDisplayed","forcePage","onPageChange","selected","containerClassName","pagination","activeLinkClassName","activeLink","SelectWithError","Select","connect","user","company","searches","userId","companyMembers","members","actions","initialSearches","createSearch","editSearch","removeSearch","companySubscriptionPlan","useSelector","selectCompanySubscriptionPlan","marketsStatus","markets","marketOptions","selectAllMarketsAsInputOptions","industriesStatus","industries","industryOptions","selectAllIndustriesAsInputOptions","dispatch","useDispatch","history","useHistory","useContext","context","setIsGlobalPreloaderShown","setModalElement","passedSearchId","useParams","passedSearch","find","isNewSearch","urlBasedValues","search","location","params","URLSearchParams","stage","get","mainBrand","competitor1","competitor2","competitor3","competitor4","marketCode","industryId","brands","setMainBrand","competitors","setCompetitor1","setCompetitor2","setCompetitor3","setCompetitor4","market","code","setMarketCode","industry","setIndustryId","validate","Object","keys","setStage","isSentimentSourcesDropdownOpen","setIsSentimentSourcesDropdownOpen","isSearchSourcesDropdownOpen","setIsSearchSourcesDropdownOpen","nextButtonRef","useRef","filledInBrands","currentSentimentRefinerBrand","setCurrentSentimentRefinerBrand","currentSearchRefinerBrand","setCurrentSearchRefinerBrand","useImmer","passedSuggestions","entries","suggestions","brandName","values","set","suggestion","updateSuggestions","wordSelectorData","brandSuggestions","loaded","suggestionsTableData","data","currentMentionsBrand","setCurrentMentionsBrand","mentions","updateMentions","mentionsTableData","brandMentions","removed","searchesLimit","fullName","owner","isFirstMarketsLoading","current","fetchAllMarkets","isFirstIndustriesLoading","validationErrors","brand","cleanInputs","onSaveSearchClicked","filteredCompetitors","x","name","searchData","searchId","createSearchData","returnedSearchId","calculateShareOfSearchWidget","console","dir","notify","show","push","fetchAllIndustries","redButton","onClicked","fetchBrandKeywordSuggestions","useCallback","draft","fetchKeywordSuggestions","unusedSuggestions","withoutBrand","update","brandsToFetch","Set","nextSentimentRefinerBrand","add","nextSearchRefinerBrand","fetchBrandMentions","fetchMentions","nextMentionsBrand","modifier","BrandSelector","currentBrand","onBrandClicked","brandSelector","brandButton","brandButtonActive","stage1","form","text","onFormSubmitted","inputGroups","inputGroup","leftText","rightText","options","nextButton","marginTop","list","listItems","listItem","listItemText","isPending","listItemButtonData","setTimeout","listItemButtonEdit","listItemButtonDelete","Array","stage2","backButton","subtitle","margin","section","aside","subtitleWrapper","warningIcon","description","warningText","toggle","prev","toggleIcon","transform","searchTable","SearchesPage","exact","path","render","routeProps","pathname","to"],"mappings":"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","file":"static/js/6.8b9201bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Search_search__EN2bj\",\"title\":\"Search_title__3DfKv\",\"stage1\":\"Search_stage1__2xTh5\",\"form\":\"Search_form__3MibI\",\"inputGroups\":\"Search_inputGroups__1NVi-\",\"inputGroup\":\"Search_inputGroup__uOOZY\",\"indicator\":\"Search_indicator__3gc9b\",\"inputWrapper\":\"Search_inputWrapper__2qcTc\",\"list\":\"Search_list__1xuJe\",\"listItems\":\"Search_listItems__1RThN\",\"listItem\":\"Search_listItem__brOx0\",\"listItemText\":\"Search_listItemText__2-5XH\",\"listItemButtonData\":\"Search_listItemButtonData__-C70C\",\"listItemButtonEdit\":\"Search_listItemButtonEdit__E5eFa\",\"listItemButtonDelete\":\"Search_listItemButtonDelete__1KnW8\",\"stage2\":\"Search_stage2__2fc2U\",\"subtitle\":\"Search_subtitle__2DS7e\",\"section\":\"Search_section__2zLVw\",\"aside\":\"Search_aside__2kuJk\",\"main\":\"Search_main__a7WZh\",\"subtitleWrapper\":\"Search_subtitleWrapper__28g8z\",\"warningText\":\"Search_warningText__1fcit\",\"warningIcon\":\"Search_warningIcon__3BI7k\",\"toggle\":\"Search_toggle__27lrU\",\"toggleIcon\":\"Search_toggleIcon__15F9U\",\"description\":\"Search_description__2Nwua\",\"brandSelector\":\"Search_brandSelector__sjwgW\",\"brandButton\":\"Search_brandButton__vWtbC\",\"brandButtonActive\":\"Search_brandButtonActive__1e3JQ\",\"wordSelector\":\"Search_wordSelector__1cpQ3\",\"searchTable\":\"Search_searchTable__1aYSZ\",\"backButton\":\"Search_backButton__2RWfP\",\"nextButton\":\"Search_nextButton__1CVkp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchNameModal\":\"SearchNameModal_searchNameModal__3BA8S\",\"label\":\"SearchNameModal_label__3GmJE\",\"greenButton\":\"SearchNameModal_greenButton__n_r9l\",\"inputWrapper\":\"SearchNameModal_inputWrapper__24JpS\",\"input\":\"SearchNameModal_input__5nqiz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wordSelector\":\"WordSelector_wordSelector__2SOI-\",\"wordsArea\":\"WordSelector_wordsArea__BUuFE\",\"wordsAreaBig\":\"WordSelector_wordsAreaBig__1iZfV\",\"wordsAreaSmall\":\"WordSelector_wordsAreaSmall__Ndi90\",\"preloader\":\"WordSelector_preloader__JIG92\",\"message\":\"WordSelector_message__1XIlu\",\"wordsWrapper\":\"WordSelector_wordsWrapper__1chr3\",\"words\":\"WordSelector_words__2WxvV\",\"word\":\"WordSelector_word__2moY0\",\"row\":\"WordSelector_row__1wnAQ\",\"input\":\"WordSelector_input__fA9O5\",\"plusButton\":\"WordSelector_plusButton__3EzL7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"SearchTable_filter__395qC\",\"filterIcon\":\"SearchTable_filterIcon__9iPYO\",\"input\":\"SearchTable_input__hAgYW\",\"main\":\"SearchTable_main__2MlVJ\",\"preloader\":\"SearchTable_preloader__13c5A\",\"message\":\"SearchTable_message__36sQw\",\"tableWrapper\":\"SearchTable_tableWrapper__1uFPY\",\"expandableCell\":\"SearchTable_expandableCell__1E80G\",\"sortingIcon\":\"SearchTable_sortingIcon__3mtGm\",\"sortingIconDown\":\"SearchTable_sortingIconDown__1tpdj\",\"trashIcon\":\"SearchTable_trashIcon__2Bgli\",\"checkboxIcon\":\"SearchTable_checkboxIcon__3et_b\",\"warning\":\"SearchTable_warning__2JDdh\",\"paginationWrapper\":\"SearchTable_paginationWrapper__14RYh\",\"pagination\":\"SearchTable_pagination__q6fQF\",\"activeLink\":\"SearchTable_activeLink__2Df6f\"};","import {\n  CSSProperties,\n  FC,\n  forwardRef,\n  PropsWithChildren,\n  useState,\n} from \"react\";\nimport styles from \"./WordSelector.module.scss\";\nimport { Input, Preloader } from \"../../components\";\nimport { AddCircle, Trash } from \"../../assets/icons\";\nimport { DndProvider } from \"react-dnd\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { withDrag, withDrop } from \"../../hocs/\";\nimport cx from \"classnames\";\nimport { isTouchDevice } from \"../../utils\";\n\nconst dndProviderBackend = isTouchDevice() ? TouchBackend : HTML5Backend;\n\nenum WordType {\n  Unused = \"unused\",\n  Included = \"included\",\n  Excluded = \"excluded\",\n}\n\ninterface CSSProps {\n  className?: string;\n  style?: CSSProperties;\n}\n\nconst WordTile = forwardRef<\n  HTMLDivElement,\n  { style?: CSSProperties; word: string; onDeleteClicked?: () => void }\n>((props, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={styles.word}\n      style={props.style}\n      title={props.word}\n    >\n      <div>{props.word}</div>\n      {props.onDeleteClicked && <Trash onClick={props.onDeleteClicked} />}\n    </div>\n  );\n});\n\nconst WordsArea = forwardRef<HTMLDivElement, PropsWithChildren<CSSProps>>(\n  ({ className, style, children }, ref) => {\n    return (\n      <div ref={ref} className={className} style={style}>\n        {children}\n      </div>\n    );\n  }\n);\n\nconst DraggableWordTile = withDrag(WordTile);\n\nconst DroppableWordsArea = withDrop(WordsArea);\n\ntype Words = {\n  unused?: string[];\n  included?: string[];\n  excluded?: string[];\n};\n\ninterface Props extends CSSProps {\n  words?: Readonly<Words>;\n  onWordStatusChanged?: (words: Words) => void;\n  status?: \"loading\" | \"succeeded\" | \"failed\";\n}\n\nexport const WordSelector: FC<Props> = ({\n  className,\n  style,\n  words,\n  onWordStatusChanged,\n  status,\n}) => {\n  const isLoaded = status === \"succeeded\" || status === \"failed\";\n\n  const unusedWords = words?.unused ?? [];\n  const includedWords = words?.included ?? [];\n  const excludedWords = words?.excluded ?? [];\n\n  const [includedWord, setIncludedWord] = useState(\"\");\n  const [excludedWord, setExcludedWord] = useState(\"\");\n\n  const onAddIncludedWordClicked = () => {\n    onWordStatusChanged?.call(null, {\n      included: [includedWord, ...includedWords],\n    });\n    setIncludedWord(\"\");\n  };\n\n  const onAddExcludedWordClicked = () => {\n    onWordStatusChanged?.call(null, {\n      excluded: [excludedWord, ...excludedWords],\n    });\n    setExcludedWord(\"\");\n  };\n\n  const onDeleteWordClicked = (\n    type: WordType.Included | WordType.Excluded,\n    index: number\n  ) => {\n    const words = {\n      included: includedWords,\n      excluded: excludedWords,\n    };\n\n    onWordStatusChanged?.call(null, {\n      unused: [words[type][index]!, ...unusedWords],\n      [type]: words[type].filter((_, i) => i !== index),\n    });\n  };\n\n  const onWordDropped = (\n    areaType: WordType,\n    word: { id: string; type: WordType }\n  ) => {\n    const words = {\n      unused: unusedWords,\n      included: includedWords,\n      excluded: excludedWords,\n    };\n    const wordIndex = Number(word.id);\n    onWordStatusChanged?.call(null, {\n      [areaType]: [words[word.type][wordIndex], ...words[areaType]],\n      [word.type]: words[word.type].filter((_, i) => i !== wordIndex),\n    });\n  };\n\n  return (\n    <DndProvider backend={dndProviderBackend}>\n      <div className={cx(styles.wordSelector, className)} style={style}>\n        <DroppableWordsArea\n          className={cx(styles.wordsArea, styles.wordsAreaBig)}\n          accept={isLoaded ? [WordType.Included, WordType.Excluded] : [\"\", \"\"]}\n          onDropped={(item) => onWordDropped(WordType.Unused, item)}\n        >\n          {status === \"loading\" && <Preloader className={styles.preloader} />}\n          {status === \"succeeded\" &&\n            (unusedWords.length ? (\n              <div className={styles.wordsWrapper}>\n                <div className={styles.words}>\n                  {unusedWords.map((word, i) => (\n                    <DraggableWordTile\n                      id={String(i)}\n                      type={WordType.Unused}\n                      word={word}\n                      key={i}\n                    />\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className={styles.message}>No suggestions found</div>\n            ))}\n          {status === \"failed\" && (\n            <div className={styles.message}>Failed to fetch suggestions :(</div>\n          )}\n        </DroppableWordsArea>\n        <div>\n          <DroppableWordsArea\n            className={cx(styles.wordsArea, styles.wordsAreaSmall)}\n            accept={[WordType.Unused, WordType.Excluded]}\n            onDropped={(item) => onWordDropped(WordType.Included, item)}\n          >\n            {includedWords.length ? (\n              <div className={styles.wordsWrapper}>\n                <div className={styles.words}>\n                  {includedWords.map((word, i) => (\n                    <DraggableWordTile\n                      style={{ borderColor: \"#41b167\" }}\n                      id={String(i)}\n                      type={WordType.Included}\n                      word={word}\n                      onDeleteClicked={\n                        isLoaded\n                          ? () => onDeleteWordClicked(WordType.Included, i)\n                          : undefined\n                      }\n                      key={i}\n                    />\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className={styles.message}>\n                Drag and drop words you\n                <br /> want to limit the search to\n                <br /> into this box\n              </div>\n            )}\n          </DroppableWordsArea>\n          <form\n            className={styles.row}\n            onSubmit={(e) => {\n              e.preventDefault();\n              onAddIncludedWordClicked();\n            }}\n          >\n            <Input\n              className={styles.input}\n              value={includedWord}\n              changeHandler={(value) => setIncludedWord(value)}\n              placeholder=\"Or write your own words to add\"\n              maxLength={60}\n            />\n            <button\n              className={styles.plusButton}\n              type=\"submit\"\n              disabled={!includedWord}\n            >\n              <AddCircle size={20} opacity={includedWord ? 1 : 0.25} />\n            </button>\n          </form>\n        </div>\n        <div>\n          <DroppableWordsArea\n            className={cx(styles.wordsArea, styles.wordsAreaSmall)}\n            accept={[WordType.Unused, WordType.Included]}\n            onDropped={(item) => onWordDropped(WordType.Excluded, item)}\n          >\n            {excludedWords.length ? (\n              <div className={styles.wordsWrapper}>\n                <div className={styles.words}>\n                  {excludedWords.map((word, i) => (\n                    <DraggableWordTile\n                      style={{ borderColor: \"#ef336a\" }}\n                      id={String(i)}\n                      type={WordType.Excluded}\n                      word={word}\n                      onDeleteClicked={\n                        isLoaded\n                          ? () => onDeleteWordClicked(WordType.Excluded, i)\n                          : undefined\n                      }\n                      key={i}\n                    />\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className={styles.message}>\n                drag and drop words you\n                <br /> want to remove from your\n                <br /> search into this box\n              </div>\n            )}\n          </DroppableWordsArea>\n          <form\n            className={styles.row}\n            onSubmit={(e) => {\n              e.preventDefault();\n              onAddExcludedWordClicked();\n            }}\n          >\n            <Input\n              className={styles.input}\n              value={excludedWord}\n              changeHandler={(value) => setExcludedWord(value)}\n              placeholder=\"Or write your own words to remove\"\n              maxLength={60}\n            />\n            <button\n              className={styles.plusButton}\n              type=\"submit\"\n              disabled={!excludedWord}\n            >\n              <AddCircle size={20} opacity={excludedWord ? 1 : 0.25} />\n            </button>\n          </form>\n        </div>\n      </div>\n    </DndProvider>\n  );\n};\n","import { FC, useState } from \"react\";\nimport styles from \"./SearchNameModal.module.scss\";\nimport { Input } from \"../../components\";\nimport { useTemporaryErrors } from \"../../hooks\";\nimport { withError } from \"../../hocs\";\n\nconst InputWithError = withError(Input);\n\ninterface Props {\n  initialSearchName?: string;\n  onNextClicked: (searchName: string) => void;\n}\n\nexport const SearchNameModal: FC<Props> = (props) => {\n  const [searchName, setSearchName] = useState(props.initialSearchName ?? \"\");\n\n  const { errors, setErrors } = useTemporaryErrors(3000);\n\n  function onNextClicked() {\n    const trimmedSearchName = searchName.trim();\n\n    if (!trimmedSearchName) {\n      setErrors({ searchName: \"Required\" });\n      return;\n    }\n\n    props.onNextClicked(trimmedSearchName);\n  }\n\n  return (\n    <div className={styles.searchNameModal}>\n      <div className={styles.label}>Save this search as:</div>\n      <div className={styles.inputWrapper}>\n        <InputWithError\n          className={styles.input}\n          value={searchName}\n          changeHandler={(value) => setSearchName(value)}\n          error={errors.searchName}\n        />\n      </div>\n      <button className={styles.greenButton} onClick={onNextClicked}>\n        Save\n      </button>\n    </div>\n  );\n};\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\nimport styles from \"./SearchTable.module.scss\";\nimport { Input, Preloader } from \"../../components\";\nimport {\n  Triangle,\n  Trash,\n  Magnifier,\n  CheckBoxChecked,\n  CheckBoxEmpty,\n  ChevronLeft,\n  ChevronRight,\n} from \"../../assets/icons\";\nimport Pagination from \"react-paginate\";\nimport cx from \"classnames\";\nimport omit from \"lodash/omit\";\nimport formatDistanceToNow from \"date-fns/formatDistanceToNow\";\n\ntype Sorting = {\n  field: string;\n  direction: \"asc\" | \"desc\";\n} | null;\n\ntype SelectedRowIds = {\n  [id: string]: true;\n};\n\ninterface Props {\n  className?: string;\n  style?: CSSProperties;\n  status?: \"loading\" | \"succeeded\" | \"failed\";\n  columns: {\n    label: string;\n    field: string;\n    isSortable?: boolean;\n    isDate?: boolean;\n    isSqueezed?: boolean;\n    isExpandable?: boolean;\n  }[];\n  rows?: {\n    id: string;\n    [field: string]: string | number | undefined;\n  }[];\n  hasFilter?: boolean;\n  filteringFields?: string[];\n  hasRowSelection?: boolean;\n  selectedRowIds?: SelectedRowIds;\n  onSelectedRowIdsChanged?: (selectedRowIds: SelectedRowIds) => void;\n  hasRowDeletion?: boolean;\n  onRowDeleted?: (rowId: string) => void;\n  noRowsText?: string;\n}\n\nexport const SearchTable: FC<Props> = ({\n  className,\n  style,\n  status,\n  columns,\n  rows = [],\n  hasFilter,\n  filteringFields,\n  hasRowSelection,\n  selectedRowIds = {},\n  onSelectedRowIdsChanged,\n  hasRowDeletion,\n  onRowDeleted,\n  noRowsText = \"No suggestions found\",\n}) => {\n  // FILTERING\n  const [filter, setFilter] = useState(\"\");\n\n  const filteredRows = useMemo(() => {\n    if (!filteringFields?.length) return rows;\n\n    const filterInLowerCase = filter.toLowerCase();\n\n    return rows.filter((row) => {\n      const joinedValues = filteringFields.reduce((acc, field) => {\n        const value = row[field] ? String(row[field]).toLowerCase() : \"\";\n        return acc + value;\n      }, \"\");\n\n      return joinedValues.includes(filterInLowerCase);\n    });\n  }, [filteringFields, filter, rows]);\n\n  // SORTING\n  const [sorting, setSorting] = useState<Sorting>(null);\n\n  const sortedRows = useMemo(() => {\n    if (!sorting) return filteredRows;\n\n    const { field, direction } = sorting;\n\n    return [...filteredRows].sort((a, b) => {\n      let valueA = a[field];\n      let valueB = b[field];\n\n      if (typeof valueA === \"string\" && typeof valueB === \"string\") {\n        valueA = valueA.toLowerCase();\n        valueB = valueB.toLowerCase();\n        return direction === \"desc\"\n          ? valueB.localeCompare(valueA)\n          : valueA.localeCompare(valueB);\n      }\n\n      if (typeof valueA === \"number\" && typeof valueB === \"number\") {\n        if (isNaN(valueA)) valueA = 0;\n        if (isNaN(valueB)) valueB = 0;\n        return direction === \"desc\" ? valueB - valueA : valueA - valueB;\n      }\n\n      return 0;\n    });\n  }, [sorting, filteredRows]);\n\n  function onSortableFieldClicked(field: string) {\n    const previousField = sorting?.field;\n\n    if (field === previousField) {\n      const previousDirection = sorting?.direction;\n      setSorting(\n        previousDirection === \"desc\"\n          ? {\n              field,\n              direction: \"asc\",\n            }\n          : null\n      );\n    } else {\n      setSorting({\n        field,\n        direction: \"desc\",\n      });\n    }\n  }\n\n  // PAGINATION\n  const [page, setPage] = useState(0);\n\n  const pageQuantity = useMemo(() => Math.ceil(filteredRows.length / 10), [\n    filteredRows,\n  ]);\n\n  const pageRows = useMemo(() => sortedRows.slice(10 * page, 10 * page + 10), [\n    sortedRows,\n    page,\n  ]);\n\n  useEffect(() => {\n    if (page >= pageQuantity) setPage(0);\n  }, [page, pageQuantity]);\n\n  // SELECTION\n  const isEachPageRowSelected = useMemo(() => {\n    return !!pageRows.length && pageRows.every(({ id }) => selectedRowIds[id]);\n  }, [pageRows, selectedRowIds]);\n\n  function onBlankMultiCheckboxClicked() {\n    if (!(onSelectedRowIdsChanged && pageRows.length)) return;\n\n    const newSelectedRowIds = { ...selectedRowIds };\n    pageRows.forEach(({ id }) => (newSelectedRowIds[id] = true));\n\n    onSelectedRowIdsChanged(newSelectedRowIds);\n  }\n\n  function onMultiCheckboxClicked() {\n    onSelectedRowIdsChanged?.call(\n      null,\n      omit(\n        selectedRowIds,\n        pageRows.map(({ id }) => id)\n      )\n    );\n  }\n\n  function onRemoveClicked(id: string) {\n    onRowDeleted?.call(null, id);\n  }\n\n  function onBlankCheckboxClicked(id: string) {\n    onSelectedRowIdsChanged?.call(null, { ...selectedRowIds, [id]: true });\n  }\n\n  function onCheckboxClicked(id: string) {\n    onSelectedRowIdsChanged?.call(null, omit(selectedRowIds, [id]));\n  }\n\n  // MISC\n  function toHTML(value: unknown) {\n    switch (typeof value) {\n      case \"string\":\n        return value;\n      case \"number\":\n        return value.toLocaleString();\n      default:\n        return \"\";\n    }\n  }\n\n  function toDateDistance(value: unknown) {\n    if (typeof value !== \"number\" || isNaN(value)) return \"\";\n    return formatDistanceToNow(value, {\n      addSuffix: true,\n    });\n  }\n\n  return (\n    <div className={className} style={style}>\n      {hasFilter && (\n        <div className={styles.filter}>\n          <Input\n            className={styles.input}\n            value={filter}\n            changeHandler={(value) => setFilter(value)}\n            placeholder=\"Select the search terms connected to your brand\"\n            maxLength={60}\n          />\n          <Magnifier\n            className={styles.filterIcon}\n            size={20}\n            opacity={filter ? 1 : 0.25}\n          />\n        </div>\n      )}\n      <div className={styles.main}>\n        {status === \"loading\" && <Preloader className={styles.preloader} />}\n        {status === \"succeeded\" &&\n          (rows.length ? (\n            <>\n              <div className={styles.tableWrapper}>\n                <table>\n                  <thead>\n                    <tr>\n                      {hasRowDeletion && <th style={{ width: 1 }} />}\n                      {hasRowSelection && (\n                        <th style={{ width: 1, fontSize: 0 }}>\n                          {isEachPageRowSelected ? (\n                            <CheckBoxChecked\n                              className={styles.checkboxIcon}\n                              color=\"#41b167\"\n                              size={16}\n                              onClick={onMultiCheckboxClicked}\n                            />\n                          ) : (\n                            <CheckBoxEmpty\n                              className={styles.checkboxIcon}\n                              size={16}\n                              onClick={onBlankMultiCheckboxClicked}\n                            />\n                          )}\n                        </th>\n                      )}\n                      {columns.map(\n                        ({ label, field, isSortable, isSqueezed }, i) => (\n                          <th\n                            style={{\n                              width: isSqueezed ? 1 : undefined,\n                              cursor: isSortable ? \"pointer\" : \"auto\",\n                            }}\n                            onClick={\n                              isSortable\n                                ? () => onSortableFieldClicked(field)\n                                : undefined\n                            }\n                            key={i}\n                          >\n                            {sorting?.field === field && (\n                              <Triangle\n                                className={cx(styles.sortingIcon, {\n                                  [styles.sortingIconDown!]:\n                                    sorting?.direction === \"desc\",\n                                })}\n                                size={8}\n                              />\n                            )}\n                            {label}\n                          </th>\n                        )\n                      )}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {pageRows.map((fields, i) => (\n                      <tr key={i}>\n                        <>\n                          {hasRowDeletion && (\n                            <td>\n                              <Trash\n                                className={styles.trashIcon}\n                                size={16}\n                                onClick={() => onRemoveClicked(fields.id)}\n                              />\n                            </td>\n                          )}\n                          {hasRowSelection && (\n                            <td style={{ fontSize: 0 }}>\n                              {selectedRowIds[fields.id] ? (\n                                <CheckBoxChecked\n                                  className={styles.checkboxIcon}\n                                  color=\"#41b167\"\n                                  size={16}\n                                  onClick={() => onCheckboxClicked(fields.id)}\n                                />\n                              ) : (\n                                <CheckBoxEmpty\n                                  className={styles.checkboxIcon}\n                                  size={16}\n                                  onClick={() =>\n                                    onBlankCheckboxClicked(fields.id)\n                                  }\n                                />\n                              )}\n                            </td>\n                          )}\n                          {columns.map(({ field, isDate, isExpandable }, k) => (\n                            <td\n                              className={cx({\n                                [styles.expandableCell!]: isExpandable,\n                              })}\n                              dangerouslySetInnerHTML={{\n                                __html: isDate\n                                  ? toDateDistance(fields[field])\n                                  : toHTML(fields[field]),\n                              }}\n                              key={k}\n                            />\n                          ))}\n                        </>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n                {!filteredRows.length && (\n                  <div className={styles.warning}>\n                    No entries are matching your search criteria\n                  </div>\n                )}\n              </div>\n              <div className={styles.paginationWrapper}>\n                {!!pageQuantity && (\n                  <Pagination\n                    previousLabel={<ChevronLeft />}\n                    nextLabel={<ChevronRight />}\n                    breakLabel={\"...\"}\n                    pageCount={pageQuantity}\n                    marginPagesDisplayed={1}\n                    pageRangeDisplayed={2}\n                    forcePage={page}\n                    onPageChange={({ selected }) => setPage(selected)}\n                    containerClassName={styles.pagination}\n                    activeLinkClassName={styles.activeLink}\n                  />\n                )}\n              </div>\n            </>\n          ) : (\n            <div className={styles.message}>{noRowsText}</div>\n          ))}\n        {status === \"failed\" && (\n          <div className={styles.message}>Failed to fetch data :(</div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import {\n  useContext,\n  useState,\n  useRef,\n  useEffect,\n  useMemo,\n  useCallback,\n} from \"react\";\nimport styles from \"./Search.module.scss\";\nimport { Input, Select, Preloader, Label, BasicModal } from \"../../components\";\nimport { SearchNameModal } from \"./SearchNameModal\";\nimport { WordSelector } from \"./WordSelector\";\nimport { SearchTable } from \"./SearchTable\";\nimport { Edit, Trash, Triangle, Warning } from \"../../assets/icons\";\nimport context from \"../../context\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport { selectCompanySubscriptionPlan } from \"../../features/subscriptionPlans/subscriptionPlansSlice\";\nimport {\n  selectAllMarketsAsInputOptions,\n  fetchAllMarkets,\n} from \"../markets/marketsSlice\";\nimport {\n  selectAllIndustriesAsInputOptions,\n  fetchAllIndustries,\n} from \"../industries/industriesSlice\";\nimport * as actions from \"../../store/actions\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { notify } from \"react-notify-toast\";\nimport { useTemporaryErrors } from \"../../hooks\";\nimport {\n  fetchKeywordSuggestions,\n  fetchMentions,\n  calculateShareOfSearchWidget,\n} from \"../../store/api\";\nimport cx from \"classnames\";\nimport { useImmer } from \"use-immer\";\nimport set from \"lodash/set\";\nimport update from \"lodash/update\";\nimport { withError } from \"../../hocs\";\n\nconst InputWithError = withError(Input);\nconst SelectWithError = withError(Select);\n\ntype Suggestions = {\n  [brandName: string]:\n    | {\n        [marketCode: string]:\n          | {\n              loaded?: {\n                status: \"loading\" | \"succeeded\" | \"failed\";\n                data?: Awaited<ReturnType<typeof fetchKeywordSuggestions>>;\n              };\n              unused?: string[];\n              included?: string[];\n              excluded?: string[];\n              selected?: { [suggestion: string]: true };\n            }\n          | undefined;\n      }\n    | undefined;\n};\n\ntype Mentions = {\n  [brandName: string]: {\n    [marketCode: string]: {\n      loaded?: {\n        status: \"loading\" | \"succeeded\" | \"failed\";\n        data?: Awaited<ReturnType<typeof fetchMentions>>;\n      };\n      removed?: { [id: string]: true };\n    };\n  };\n};\n\ninterface Props {\n  userId: Store.User[\"id\"];\n  companyMembers: Store.Company[\"members\"];\n  searches: Store.Searches;\n  createSearch: typeof actions.createSearch;\n  editSearch: typeof actions.editSearch;\n  removeSearch: typeof actions.removeSearch;\n  setCurrent: typeof actions.setCurrent;\n}\n\nconst Search = ({\n  userId,\n  companyMembers,\n  searches: initialSearches,\n  createSearch,\n  editSearch,\n  removeSearch,\n}: Props) => {\n  // GENERAL\n  const companySubscriptionPlan = useSelector(selectCompanySubscriptionPlan);\n  const marketsStatus = useSelector(({ markets }: RootState) => markets.status);\n  const marketOptions = useSelector(selectAllMarketsAsInputOptions);\n  const industriesStatus = useSelector(\n    ({ industries }: RootState) => industries.status\n  );\n  const industryOptions = useSelector(selectAllIndustriesAsInputOptions);\n\n  const dispatch = useDispatch();\n\n  const history = useHistory();\n\n  const { setIsGlobalPreloaderShown, setModalElement } = useContext(context);\n\n  const { errors, setErrors } = useTemporaryErrors(3000);\n\n  // CURRENT SEARCH\n  const { id: passedSearchId } = useParams<{ id: string }>();\n\n  const passedSearch = useMemo(() => {\n    if (passedSearchId === \"new\") return;\n\n    return initialSearches.find(({ id }) => id === passedSearchId);\n  }, [passedSearchId, initialSearches]);\n\n  const isNewSearch = !passedSearch;\n\n  const urlBasedValues = useMemo(() => {\n    const search = history.location.search;\n    const params = new URLSearchParams(search);\n\n    const stage = Number(params.get(\"stage\"));\n\n    return {\n      stage: (stage === 1 || stage === 2 ? stage : 1) as 1 | 2,\n      mainBrand: params.get(\"mainBrand\") ?? \"\",\n      competitor1: params.get(\"competitor1\") ?? \"\",\n      competitor2: params.get(\"competitor2\") ?? \"\",\n      competitor3: params.get(\"competitor3\") ?? \"\",\n      competitor4: params.get(\"competitor4\") ?? \"\",\n      marketCode: params.get(\"marketCode\") ?? \"\",\n      industryId: params.get(\"industryId\") ?? \"\",\n    };\n  }, [history.location.search]);\n\n  const [mainBrand, setMainBrand] = useState(\n    passedSearch?.brands.main ?? urlBasedValues.mainBrand\n  );\n  const [competitor1, setCompetitor1] = useState(\n    passedSearch?.brands.competitors[0] ?? urlBasedValues.competitor1\n  );\n  const [competitor2, setCompetitor2] = useState(\n    passedSearch?.brands.competitors[1] ?? urlBasedValues.competitor2\n  );\n  const [competitor3, setCompetitor3] = useState(\n    passedSearch?.brands.competitors[2] ?? urlBasedValues.competitor3\n  );\n  const [competitor4, setCompetitor4] = useState(\n    passedSearch?.brands.competitors[3] ?? urlBasedValues.competitor4\n  );\n  const [marketCode, setMarketCode] = useState(\n    passedSearch?.market.code ?? urlBasedValues.marketCode\n  );\n  const [industryId, setIndustryId] = useState(\n    passedSearch?.industry.id ?? urlBasedValues.industryId\n  );\n\n  const [stage, setStage] = useState<1 | 2>(() => {\n    if (urlBasedValues.stage === 2) {\n      const errors = validate();\n      if (Object.keys(errors).length) {\n        setErrors(errors);\n        return 1;\n      }\n      return 2;\n    }\n    return 1;\n  });\n\n  const [\n    isSentimentSourcesDropdownOpen,\n    setIsSentimentSourcesDropdownOpen,\n  ] = useState(false);\n  const [\n    isSearchSourcesDropdownOpen,\n    setIsSearchSourcesDropdownOpen,\n  ] = useState(false);\n\n  const nextButtonRef = useRef<HTMLButtonElement>(null);\n\n  const filledInBrands = useMemo(() => {\n    return [\n      mainBrand,\n      ...[competitor1, competitor2, competitor3, competitor4].filter(\n        (value) => value\n      ),\n    ];\n  }, [mainBrand, competitor1, competitor2, competitor3, competitor4]);\n\n  const [\n    currentSentimentRefinerBrand,\n    setCurrentSentimentRefinerBrand,\n  ] = useState(\"\");\n\n  const [currentSearchRefinerBrand, setCurrentSearchRefinerBrand] = useState(\n    \"\"\n  );\n\n  const [suggestions, updateSuggestions] = useImmer<Suggestions>(() => {\n    const passedSuggestions: Suggestions = {};\n\n    Object.entries(passedSearch?.suggestions || {}).forEach(\n      ([brandName, values]) => {\n        set(passedSuggestions, [brandName, marketCode], {\n          ...values,\n          selected: values?.selected?.reduce((acc, suggestion) => {\n            acc[suggestion] = true;\n            return acc;\n          }, {} as { [suggestion: string]: true }),\n        });\n      }\n    );\n\n    return passedSuggestions;\n  });\n\n  const wordSelectorData = useMemo(() => {\n    const brandSuggestions =\n      suggestions[currentSentimentRefinerBrand]?.[marketCode];\n    if (!brandSuggestions) return;\n    return {\n      words: {\n        unused: brandSuggestions.unused,\n        included: brandSuggestions.included,\n        excluded: brandSuggestions.excluded,\n      },\n      status: brandSuggestions.loaded?.status,\n    };\n  }, [suggestions, currentSentimentRefinerBrand, marketCode]);\n\n  const suggestionsTableData = useMemo(() => {\n    const brandSuggestions =\n      suggestions[currentSearchRefinerBrand]?.[marketCode];\n    if (!brandSuggestions) return;\n    return {\n      rows: brandSuggestions.loaded?.data,\n      selectedRowIds: brandSuggestions.selected,\n      status: brandSuggestions.loaded?.status,\n    };\n  }, [suggestions, currentSearchRefinerBrand, marketCode]);\n\n  const [currentMentionsBrand, setCurrentMentionsBrand] = useState(\"\");\n\n  const [mentions, updateMentions] = useImmer<Mentions>({});\n\n  const mentionsTableData = useMemo(() => {\n    const brandMentions = mentions[currentMentionsBrand]?.[marketCode];\n    if (!brandMentions) return;\n    return {\n      rows: brandMentions.loaded?.data?.filter(\n        ({ id }) => !brandMentions?.removed?.[id]\n      ),\n      status: brandMentions.loaded?.status,\n    };\n  }, [mentions, currentMentionsBrand, marketCode]);\n\n  const searchesLimit = companySubscriptionPlan?.searchesLimit || 1;\n\n  const searches = useMemo(() => {\n    return initialSearches.map((search) => {\n      let fullName;\n      if (search.owner.id !== userId) {\n        fullName = companyMembers.find(({ id }) => id === search.owner.id)\n          ?.fullName;\n      }\n      return {\n        ...search,\n        owner: { id: search.owner.id, fullName },\n      };\n    });\n  }, [initialSearches, companyMembers, userId]);\n\n  const isFirstMarketsLoading = useRef(true);\n\n  useEffect(() => {\n    if (\n      isFirstMarketsLoading.current &&\n      (marketsStatus === \"idle\" || marketsStatus === \"failed\")\n    ) {\n      isFirstMarketsLoading.current = false;\n      dispatch(fetchAllMarkets());\n    }\n  }, [marketsStatus, dispatch]);\n\n  const isFirstIndustriesLoading = useRef(true);\n\n  useEffect(() => {\n    if (\n      isFirstIndustriesLoading.current &&\n      (industriesStatus === \"idle\" || industriesStatus === \"failed\")\n    ) {\n      isFirstIndustriesLoading.current = false;\n      dispatch(fetchAllIndustries());\n    }\n  }, [industriesStatus, dispatch]);\n\n  function validate() {\n    const validationErrors: typeof errors = {};\n    const brands = [\n      mainBrand,\n      competitor1,\n      competitor2,\n      competitor3,\n      competitor4,\n    ].map((brand) => brand.trim().toLowerCase());\n    const [main, ...competitors] = brands;\n    if (!main) validationErrors.mainBrand = \"Required\";\n    if (!competitors[0]) validationErrors.competitor1 = \"Required\";\n    competitors.forEach((brand, i) => {\n      if (brand && brands.slice(0, i + 1).includes(brand))\n        validationErrors[\"competitor\" + (i + 1)] =\n          \"This brand is already entered\";\n    });\n    if (!industryId) validationErrors.industryId = \"Required\";\n    if (!marketCode) validationErrors.marketCode = \"Required\";\n    return validationErrors;\n  }\n\n  function cleanInputs() {\n    setStage(1);\n    setMainBrand(\"\");\n    setCompetitor1(\"\");\n    setCompetitor2(\"\");\n    setCompetitor3(\"\");\n    setCompetitor4(\"\");\n    setIndustryId(\"\");\n    setMarketCode(\"\");\n  }\n\n  async function onSaveSearchClicked() {\n    const filteredCompetitors = [\n      competitor1,\n      competitor2,\n      competitor3,\n      competitor4,\n    ].filter((x) => x);\n\n    const brands = [mainBrand, ...filteredCompetitors];\n\n    setModalElement(\n      <SearchNameModal\n        initialSearchName={passedSearch?.name}\n        onNextClicked={async (searchName) => {\n          setIsGlobalPreloaderShown(true);\n          const searchData = {\n            name: searchName,\n            mainBrand,\n            competitors: filteredCompetitors,\n            industryId,\n            marketCode,\n            suggestions: brands.reduce<{\n              [brandName: string]: {\n                included?: string[];\n                excluded?: string[];\n                selected?: string[];\n              };\n            }>((acc, brand) => {\n              const brandSuggestions = suggestions[brand]?.[marketCode];\n\n              if (brandSuggestions) {\n                acc[brand] = {\n                  included: brandSuggestions.included,\n                  excluded: brandSuggestions.excluded,\n                  selected: Object.keys(brandSuggestions.selected ?? {}),\n                };\n              }\n\n              return acc;\n            }, {}),\n          };\n\n          try {\n            let searchId;\n\n            if (passedSearch) {\n              await editSearch(passedSearch.id, searchData);\n\n              searchId = passedSearch.id;\n            } else {\n              const createSearchData: any = await createSearch({\n                userId,\n                ...searchData,\n              });\n\n              const returnedSearchId = createSearchData?.searchId;\n\n              if (typeof returnedSearchId === \"string\" && returnedSearchId) {\n                searchId = returnedSearchId;\n              }\n            }\n\n            if (searchId) {\n              try {\n                await calculateShareOfSearchWidget(searchId);\n              } catch (error) {\n                console.dir(error);\n              }\n            }\n\n            setModalElement(null);\n\n            if (searches.length) {\n              cleanInputs();\n              notify.show(\n                \"Your search has now been saved and can be found under saved searches\",\n                \"success\",\n                5000\n              );\n              history.push(\"/searches/new\");\n            } else {\n              history.push(\"/widget-library\");\n            }\n          } catch (error) {\n            console.dir(error);\n            notify.show(\"Oops, something went wrong\", \"error\");\n          }\n          setIsGlobalPreloaderShown(false);\n        }}\n      />\n    );\n  }\n\n  function onDataClicked(id: string) {\n    setIsGlobalPreloaderShown(true);\n    setTimeout(() => {\n      history.push(\"/searches/\" + id + \"?stage=2\");\n      setIsGlobalPreloaderShown(false);\n    }, 500);\n  }\n\n  const onEditClicked = (id: string) => {\n    setIsGlobalPreloaderShown(true);\n    setTimeout(() => {\n      history.push(\"/searches/\" + id);\n      setIsGlobalPreloaderShown(false);\n    }, 500);\n  };\n\n  async function onDeleteClicked({ id, name }: Store.Search) {\n    setModalElement(\n      <BasicModal\n        redButton={{ onClicked: () => setModalElement(null) }}\n        greenButton={{\n          onClicked: async () => {\n            setIsGlobalPreloaderShown(true);\n            try {\n              await removeSearch(id);\n              setModalElement(null);\n              notify.show(\"Your search has been deleted\", \"success\");\n            } catch (error) {\n              console.dir(error);\n              notify.show(\"Oops, something went wrong\", \"error\");\n            }\n            setIsGlobalPreloaderShown(false);\n          },\n        }}\n      >\n        Do you really want to delete \"{name}\" search?\n      </BasicModal>\n    );\n  }\n\n  const onFormSubmitted = () => {\n    if (isNewSearch) {\n      if (\n        searches.filter(({ owner }) => owner.id === userId).length >=\n        searchesLimit\n      ) {\n        setModalElement(\n          <BasicModal\n            redButton={{ onClicked: () => setModalElement(null) }}\n            greenButton={{\n              text: \"Check plans\",\n              onClicked: () => {\n                setModalElement(null);\n                history.push(\"/pricing\");\n              },\n            }}\n          >\n            Your current plan has a limit of <b>{searchesLimit}</b> saved search\n            {searchesLimit === 1 ? \"\" : \"es\"}.\n            <br />\n            Either you delete your saved search{searchesLimit === 1\n              ? \"\"\n              : \"es\"}{\" \"}\n            or you can upgrade your plan.\n          </BasicModal>\n        );\n        return;\n      }\n    }\n\n    const errors = validate();\n    if (Object.keys(errors).length) {\n      setErrors(errors);\n      return;\n    }\n\n    setMainBrand((x) => x.trim());\n    setCompetitor1((x) => x.trim());\n    setCompetitor2((x) => x.trim());\n    setCompetitor3((x) => x.trim());\n    setCompetitor4((x) => x.trim());\n\n    setStage(2);\n  };\n\n  const fetchBrandKeywordSuggestions = useCallback(\n    async (brand: string) => {\n      const status = suggestions[brand]?.[marketCode]?.loaded?.status;\n      if (status === \"loading\" || status === \"succeeded\" || status === \"failed\")\n        return;\n\n      updateSuggestions((draft) => {\n        set(draft, [brand, marketCode, \"loaded\"], {\n          status: \"loading\",\n        });\n      });\n      try {\n        const data = await fetchKeywordSuggestions(brand, marketCode);\n        const unusedSuggestions = data.reduce((acc, { withoutBrand }) => {\n          if (withoutBrand) acc.push(withoutBrand);\n          return acc;\n        }, [] as string[]);\n        updateSuggestions((draft) => {\n          update(draft, [brand, marketCode], (brandSuggestions) => {\n            return {\n              ...brandSuggestions,\n              loaded: {\n                status: \"succeeded\",\n                data,\n              },\n              unused: unusedSuggestions,\n            };\n          });\n        });\n      } catch (error) {\n        console.dir(error);\n        updateSuggestions((draft) => {\n          set(draft, [brand, marketCode, \"loaded\"], {\n            status: \"failed\",\n          });\n        });\n      }\n    },\n    [suggestions, marketCode, updateSuggestions]\n  );\n\n  useEffect(() => {\n    if (!(stage === 2)) return;\n\n    const brandsToFetch = new Set<string>();\n\n    const nextSentimentRefinerBrand = filledInBrands.includes(\n      currentSentimentRefinerBrand\n    )\n      ? currentSentimentRefinerBrand\n      : filledInBrands[0]!;\n    setCurrentSentimentRefinerBrand(nextSentimentRefinerBrand);\n    brandsToFetch.add(nextSentimentRefinerBrand);\n\n    const nextSearchRefinerBrand = filledInBrands.includes(\n      currentSearchRefinerBrand\n    )\n      ? currentSearchRefinerBrand\n      : filledInBrands[0]!;\n    setCurrentSearchRefinerBrand(nextSearchRefinerBrand);\n    brandsToFetch.add(nextSearchRefinerBrand);\n\n    brandsToFetch.forEach((brand) => {\n      fetchBrandKeywordSuggestions(brand);\n    });\n  }, [\n    stage,\n    currentSentimentRefinerBrand,\n    currentSearchRefinerBrand,\n    filledInBrands,\n    fetchBrandKeywordSuggestions,\n  ]);\n\n  const fetchBrandMentions = useCallback(\n    async (brand: string) => {\n      const status = mentions[brand]?.[marketCode]?.loaded?.status;\n      if (status === \"loading\" || status === \"succeeded\" || status === \"failed\")\n        return;\n\n      updateMentions((draft) => {\n        set(draft, [brand, marketCode, \"loaded\"], {\n          status: \"loading\",\n        });\n      });\n      try {\n        const data = await fetchMentions(brand, marketCode);\n        updateMentions((draft) => {\n          set(draft, [brand, marketCode, \"loaded\"], {\n            status: \"succeeded\",\n            data,\n          });\n        });\n      } catch (error) {\n        console.dir(error);\n        updateMentions((draft) => {\n          set(draft, [brand, marketCode, \"loaded\"], {\n            status: \"failed\",\n          });\n        });\n      }\n    },\n    [mentions, marketCode, updateMentions]\n  );\n\n  useEffect(() => {\n    if (!(stage === 2)) return;\n\n    const nextMentionsBrand = filledInBrands.includes(currentMentionsBrand)\n      ? currentMentionsBrand\n      : filledInBrands[0]!;\n    setCurrentMentionsBrand(nextMentionsBrand);\n    fetchBrandMentions(nextMentionsBrand);\n  }, [stage, filledInBrands, currentMentionsBrand, fetchBrandMentions]);\n\n  if (\n    marketsStatus === \"idle\" ||\n    marketsStatus === \"loading\" ||\n    industriesStatus === \"idle\" ||\n    industriesStatus === \"loading\"\n  ) {\n    return <Preloader modifier=\"inner\" />;\n  }\n\n  const BrandSelector = (\n    currentBrand: string,\n    onBrandClicked: (brand: string) => void\n  ) => {\n    return (\n      <div className={styles.brandSelector}>\n        {filledInBrands.map((brand) => (\n          <button\n            className={cx(styles.brandButton, {\n              [styles.brandButtonActive!]: brand === currentBrand,\n            })}\n            onClick={() => onBrandClicked(brand)}\n            key={brand}\n          >\n            {brand}\n          </button>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div className={styles.search}>\n      {stage === 1 && (\n        <div className={styles.stage1}>\n          <form\n            className={styles.form}\n            onSubmit={(e) => {\n              e.preventDefault();\n              onFormSubmitted();\n            }}\n          >\n            <div className={styles.title}>\n              {passedSearch\n                ? \"EDIT SEARCH - \" + passedSearch.name\n                : \"NEW SEARCH\"}\n            </div>\n            <div className={styles.inputGroups}>\n              <div className={styles.inputGroup}>\n                <div className={styles.inputWrapper}>\n                  <Label leftText=\"Main brand or topic to track\" />\n                  <InputWithError\n                    className={styles.input}\n                    value={mainBrand}\n                    changeHandler={(value) => setMainBrand(value)}\n                    error={errors.mainBrand}\n                  />\n                </div>\n              </div>\n              <div className={styles.inputGroup}>\n                <div className={styles.inputWrapper}>\n                  <Label leftText=\"Compare with 1\" />\n                  <InputWithError\n                    className={styles.input}\n                    value={competitor1}\n                    changeHandler={(value) => setCompetitor1(value)}\n                    error={errors.competitor1}\n                  />\n                </div>\n                <div className={styles.inputWrapper}>\n                  <Label leftText=\"Compare with 2\" rightText=\"(Optional)\" />\n                  <InputWithError\n                    className={styles.input}\n                    value={competitor2}\n                    changeHandler={(value) => setCompetitor2(value)}\n                    error={errors.competitor2}\n                  />\n                </div>\n                <div className={styles.inputWrapper}>\n                  <Label leftText=\"Compare with 3\" rightText=\"(Optional)\" />\n                  <InputWithError\n                    className={styles.input}\n                    value={competitor3}\n                    changeHandler={(value) => setCompetitor3(value)}\n                    error={errors.competitor3}\n                  />\n                </div>\n                <div className={styles.inputWrapper}>\n                  <Label leftText=\"Compare with 4\" rightText=\"(Optional)\" />\n                  <InputWithError\n                    className={styles.input}\n                    value={competitor4}\n                    changeHandler={(value) => setCompetitor4(value)}\n                    error={errors.competitor4}\n                  />\n                </div>\n              </div>\n              <div className={styles.inputGroup}>\n                <div className={styles.inputWrapper}>\n                  <Label leftText=\"Market\" />\n                  <SelectWithError\n                    options={marketOptions}\n                    value={marketCode}\n                    changeHandler={(value) => setMarketCode(value)}\n                    error={errors.marketCode}\n                  />\n                </div>\n                <div className={styles.inputWrapper}>\n                  <Label leftText=\"Industry\" />\n                  <SelectWithError\n                    options={industryOptions}\n                    value={industryId}\n                    changeHandler={(value) => setIndustryId(value)}\n                    error={errors.industryId}\n                  />\n                </div>\n              </div>\n            </div>\n            <button\n              ref={nextButtonRef}\n              className={styles.nextButton}\n              style={{ marginTop: 32 }}\n              type=\"submit\"\n            >\n              Next\n            </button>\n          </form>\n          <div className={styles.list}>\n            <div className={styles.title}>YOUR SAVED SEARCHES</div>\n            <div className={styles.listItems}>\n              {searches.map((search, i) => (\n                <div className={styles.listItem} key={i}>\n                  <div className={styles.listItemText}>\n                    <div title={search.name}>\n                      {search.name}\n                      {!!search.owner.fullName &&\n                        ` (by ${search.owner.fullName})`}\n                    </div>\n                    {search.isPending && <div>PENDING</div>}\n                  </div>\n                  {search.owner.id === userId && (\n                    <>\n                      {search.id !== passedSearch?.id && (\n                        <>\n                          <div\n                            className={styles.listItemButtonData}\n                            onClick={() => onDataClicked(search.id)}\n                          >\n                            <div>Data</div>\n                          </div>\n                          <div\n                            className={styles.listItemButtonEdit}\n                            onClick={() => onEditClicked(search.id)}\n                          >\n                            <div>Edit</div> <Edit width={15} />\n                          </div>\n                        </>\n                      )}\n                      <div\n                        className={styles.listItemButtonDelete}\n                        onClick={() => onDeleteClicked(search)}\n                      >\n                        <div>Delete</div> <Trash size={18} />\n                      </div>\n                    </>\n                  )}\n                </div>\n              ))}\n              {searches.length < 3 &&\n                [...Array(3 - searches.length).keys()].map((_, i) => (\n                  <div className={styles.listItem} key={i}></div>\n                ))}\n            </div>\n          </div>\n        </div>\n      )}\n      {stage === 2 && (\n        <div className={styles.stage2}>\n          <div className={styles.title}>\n            {passedSearch ? \"EDIT SEARCH - \" + passedSearch.name : \"NEW SEARCH\"}\n          </div>\n          <div>\n            <button className={styles.backButton} onClick={() => setStage(1)}>\n              Go back\n            </button>\n            <div style={{ marginTop: 16 }}>\n              <span className={styles.subtitle}>\n                At this point, you could either start off with the search you\n                just did or you could tweak your data to make sure it suits you\n              </span>\n              <button\n                className={styles.nextButton}\n                style={{ margin: \"4px 4px 4px 16px\" }}\n                type=\"button\"\n                onClick={() => onSaveSearchClicked()}\n              >\n                Next\n              </button>\n            </div>\n          </div>\n          <div className={styles.section}>\n            <div className={styles.aside}>\n              <div className={styles.subtitleWrapper}>\n                <div className={styles.subtitle}>\n                  Refine your sentiment data\n                </div>\n                <Warning className={styles.warningIcon} />\n              </div>\n              <div className={styles.description}>\n                <p>\n                  <b>\n                    Your search is now taking in all references of your entered\n                    brand name, if needed you can narrow down your search by\n                    only looking at certain words or remove words not related to\n                    your brand.\n                  </b>\n                </p>\n                <p>\n                  <span className={styles.warningText}>(Warning)</span> As this\n                  can skew your data only do this for generic brand names that\n                  are shared with other unrelated topics/brands such as ”Apple”\n                  or if you wish to only include specific topics regarding a\n                  brand such as ”Apple AND headphones”. Otherwise we recommend\n                  you to not add words.\n                </p>\n                <p\n                  className={styles.toggle}\n                  onClick={() =>\n                    setIsSentimentSourcesDropdownOpen((prev) => !prev)\n                  }\n                >\n                  <Triangle\n                    className={styles.toggleIcon}\n                    style={{\n                      transform: `rotate(${\n                        isSentimentSourcesDropdownOpen ? 180 : 90\n                      }deg)`,\n                    }}\n                  />\n                  <b>Sentiment data collected from:</b>\n                </p>\n                {isSentimentSourcesDropdownOpen && (\n                  <>\n                    <p>\n                      Online news (Financial Times, Dagens Nyheter, LeMonde,\n                      etc)\n                    </p>\n                    <p>Social media (Facebook, Twitter, Instagram, etc)</p>\n                    <p>Blogs (Yanko Design, kitchn, etc)</p>\n                    <p>Forums (Reddit, etc)</p>\n                    <p>\n                      Product reviews (Yelp, etc), video* (Youtube, Vimeo, etc.)\n                    </p>\n                  </>\n                )}\n              </div>\n            </div>\n            <div className={styles.main}>\n              {BrandSelector(\n                currentSentimentRefinerBrand,\n                setCurrentSentimentRefinerBrand\n              )}\n              <WordSelector\n                className={styles.wordSelector}\n                {...wordSelectorData}\n                onWordStatusChanged={(words) => {\n                  updateSuggestions((draft) => {\n                    update(\n                      draft,\n                      [currentSentimentRefinerBrand, marketCode],\n                      (brandSuggestions) => ({\n                        ...brandSuggestions,\n                        ...words,\n                      })\n                    );\n                  });\n                }}\n              />\n            </div>\n          </div>\n          <div className={styles.section}>\n            <div className={styles.aside}>\n              <div className={styles.subtitleWrapper}>\n                <div className={styles.subtitle}>Refine your search data</div>\n                <Warning className={styles.warningIcon} />\n              </div>\n              <div className={styles.description}>\n                <p>\n                  <b>\n                    Your search is now taking in all data related to your\n                    entered brand name, if needed you can narrow down your\n                    search by only looking at certain words or remove words\n                    completely unrelated to your brand.\n                  </b>\n                </p>\n                <p>\n                  <span className={styles.warningText}>(Warning)</span> As this\n                  can skew your data only do this for generic brand names that\n                  are shared with other unrelated topics/brands such as ”Apple”\n                  or if you wish to only include specific search terms of a\n                  brand such as ”Apple iPhone”. Otherwise we recommend you to\n                  not add words.\n                </p>\n\n                <p\n                  className={styles.toggle}\n                  onClick={() =>\n                    setIsSearchSourcesDropdownOpen((prev) => !prev)\n                  }\n                >\n                  <Triangle\n                    className={styles.toggleIcon}\n                    style={{\n                      transform: `rotate(${\n                        isSearchSourcesDropdownOpen ? 180 : 90\n                      }deg)`,\n                    }}\n                  />\n                  <b>Search data collected from:</b>\n                </p>\n                {isSearchSourcesDropdownOpen && (\n                  <>\n                    <p>Google</p>\n                    <p>Youtube</p>\n                    <p>Bing</p>\n                    <p>Amazon (USA)</p>\n                    <p>eBay</p>\n                    <p>Play Store</p>\n                    <p>Instagram (Global Searches)</p>\n                    <p>Twitter (Global Searches)</p>\n                  </>\n                )}\n              </div>\n            </div>\n            <div className={styles.main}>\n              {BrandSelector(\n                currentSearchRefinerBrand,\n                setCurrentSearchRefinerBrand\n              )}\n              <SearchTable\n                className={styles.searchTable}\n                columns={[\n                  { label: \"Keywords\", field: \"id\" },\n                  {\n                    label: \"Search volume\",\n                    field: \"volume\",\n                    isSortable: true,\n                    isSqueezed: true,\n                  },\n                ]}\n                {...suggestionsTableData}\n                hasFilter\n                filteringFields={[\"id\", \"volume\"]}\n                hasRowSelection\n                onSelectedRowIdsChanged={(selectedRowIds) => {\n                  updateSuggestions((draft) => {\n                    set(\n                      draft,\n                      [currentSearchRefinerBrand, marketCode, \"selected\"],\n                      selectedRowIds\n                    );\n                  });\n                }}\n              />\n            </div>\n          </div>\n          <div className={styles.section}>\n            <div className={styles.aside}>\n              <div className={styles.subtitle}>Mentions</div>\n              <div className={styles.description}>\n                <p>\n                  These are your up to 200 latest mentions of your brand. This\n                  is for you to get an understanding of your data and remove all\n                  topics that are not relevant for your brand analysis. It will\n                  take up to 72 hours for your news mentions to show up, so feel\n                  free to return to this part after your search is done to see\n                  your results.\n                </p>\n              </div>\n            </div>\n            <div className={styles.main}>\n              {BrandSelector(currentMentionsBrand, setCurrentMentionsBrand)}\n              <SearchTable\n                className={styles.searchTable}\n                columns={[\n                  { label: \"Article\", field: \"link\", isExpandable: true },\n                  {\n                    label: \"Source\",\n                    field: \"source\",\n                    isSortable: true,\n                    isSqueezed: true,\n                  },\n                  {\n                    label: \"Category\",\n                    field: \"category\",\n                    isSortable: true,\n                    isSqueezed: true,\n                  },\n                  {\n                    label: \"Date\",\n                    field: \"time\",\n                    isSortable: true,\n                    isDate: true,\n                    isSqueezed: true,\n                  },\n                ]}\n                {...mentionsTableData}\n                hasRowDeletion\n                onRowDeleted={(id) => {\n                  updateMentions((draft) => {\n                    update(\n                      draft,\n                      [currentMentionsBrand, marketCode, \"removed\"],\n                      (removed) => ({ ...removed, [id]: true })\n                    );\n                  });\n                }}\n                noRowsText=\"No mentions found\"\n              />\n              <button\n                className={styles.nextButton}\n                style={{ marginTop: 32 }}\n                onClick={() => onSaveSearchClicked()}\n              >\n                Next\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ user, company, searches }: Store.State) => ({\n  userId: user.id,\n  companyMembers: company.members,\n  searches,\n});\n\nexport default connect(mapStateToProps, actions)(Search);\n","import { FC } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Search from \"./Search\";\n\nconst SearchesPage: FC = () => {\n  return (\n    <Switch>\n      <Route\n        exact\n        path=\"/searches/:id\"\n        render={(routeProps) => (\n          <Search\n            key={routeProps.location.pathname + routeProps.location.search}\n          />\n        )}\n      ></Route>\n      <Redirect to=\"/searches/new\" />\n    </Switch>\n  );\n};\n\nexport default SearchesPage;\n"],"sourceRoot":""}