{"version":3,"sources":["containers/Home/Profile/Profile.module.scss","containers/Home/Profile/Profile.tsx"],"names":["module","exports","InputWithError","withError","Input","emailSchema","yup","email","connect","user","firstName","lastName","company","title","branch","market","phone","isUserReportReceiver","isReportReceiver","dispatch","updateUserProfileSettings","settings","actions","reAuthenticate","password","updateEmail","updatePassword","updateIsUserReportReceiver","initialCompany","initialTitle","initialBranch","initialMarket","initialPhone","setIsGlobalPreloaderShown","useContext","context","useState","setCompany","setTitle","setBranch","setMarket","setPhone","currentPassword","setCurrentPassword","newEmail","setNewEmail","newPassword","setNewPassword","confirmedNewPassword","setConfirmedNewPassword","handleInputChange","a","notify","show","useTemporaryErrors","errors","setErrors","validationErrors","currentPasswordTrimmed","trim","newEmailTrimmed","isValidSync","Object","keys","length","closeCredentialsSection","newPasswordTrimmed","confirmedNewPasswordTrimmed","console","dir","className","styles","profile","content","section","sectionTitle","profileIcon","userName","label","input","value","changeHandler","text","type","error","divider","button","onClick"],"mappings":"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","file":"static/js/12.ce7514e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__11r46\",\"content\":\"Profile_content__2-lJD\",\"section\":\"Profile_section__2_Hqj\",\"title\":\"Profile_title__24UgM\",\"sectionTitle\":\"Profile_sectionTitle__1zwuN\",\"profileIcon\":\"Profile_profileIcon__3j9Ou\",\"userName\":\"Profile_userName__o0_zt\",\"email\":\"Profile_email__1CxX-\",\"button\":\"Profile_button__1y3yr\",\"text\":\"Profile_text__2Prff\",\"label\":\"Profile_label__338kv\",\"divider\":\"Profile_divider___be8v\"};","import React, { useContext, useState } from \"react\";\nimport styles from \"./Profile.module.scss\";\nimport context from \"../../../context\";\nimport { connect } from \"react-redux\";\nimport { Input } from \"../../../components\";\nimport * as actions from \"../../../store/actions\";\nimport { notify } from \"react-notify-toast\";\nimport { Profile as ProfileIcon } from \"../../../assets/icons\";\nimport { useTemporaryErrors } from \"../../../hooks\";\nimport * as yup from \"yup\";\nimport { withError } from \"../../../hocs\";\n\nconst InputWithError = withError(Input);\n\nconst emailSchema = yup.string().email();\n\ninterface Props {\n  firstName: string;\n  lastName: string;\n  email: string;\n  company?: string;\n  title?: string;\n  branch?: string;\n  market?: string;\n  phone?: string;\n  isUserReportReceiver: Store.User[\"isReportReceiver\"];\n  updateUserProfileSettings: typeof actions.updateUserProfileSettings;\n  reAuthenticate: (password: string) => void;\n  updateEmail: (email: string) => void;\n  updatePassword: (password: string) => void;\n  updateIsUserReportReceiver: typeof actions.updateIsUserReportReceiver;\n}\n\nconst Profile = ({\n  firstName = \"\",\n  lastName = \"\",\n  company: initialCompany = \"\",\n  title: initialTitle = \"\",\n  branch: initialBranch = \"\",\n  market: initialMarket = \"\",\n  email = \"\",\n  phone: initialPhone = \"\",\n  isUserReportReceiver,\n  updateUserProfileSettings,\n  reAuthenticate = () => {},\n  updateEmail = () => {},\n  updatePassword = () => {},\n  updateIsUserReportReceiver,\n}: Props) => {\n  const { setIsGlobalPreloaderShown } = useContext(context);\n\n  const [company, setCompany] = useState(initialCompany);\n  const [title, setTitle] = useState(initialTitle);\n  const [branch, setBranch] = useState(initialBranch);\n  const [market, setMarket] = useState(initialMarket);\n  const [phone, setPhone] = useState(initialPhone);\n  const [currentPassword, setCurrentPassword] = useState(\"\");\n  const [newEmail, setNewEmail] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmedNewPassword, setConfirmedNewPassword] = useState(\"\");\n\n  async function handleInputChange(settings: {\n    avatar?: string;\n    company?: string;\n    title?: string;\n    branch?: string;\n    market?: string;\n    phone?: string;\n  }) {\n    try {\n      await updateUserProfileSettings(settings);\n    } catch {\n      notify.show(\"Oops, something went wrong\", \"error\");\n    }\n  }\n\n  const { errors, setErrors } = useTemporaryErrors(3000);\n\n  async function handleChangeEmailClick() {\n    const validationErrors: typeof errors = {};\n\n    const currentPasswordTrimmed = currentPassword.trim();\n    const newEmailTrimmed = newEmail.trim();\n\n    if (!currentPasswordTrimmed) validationErrors.currentPassword = \"Required\";\n    if (!emailSchema.isValidSync(newEmailTrimmed))\n      validationErrors.newEmail = \"Should be a valid email address\";\n    if (!newEmailTrimmed) validationErrors.newEmail = \"Required\";\n\n    if (Object.keys(validationErrors).length) {\n      setErrors(validationErrors);\n      return;\n    }\n\n    setIsGlobalPreloaderShown(true);\n    try {\n      await reAuthenticate(currentPasswordTrimmed);\n      await updateEmail(newEmailTrimmed);\n      notify.show(\"Your email has been updated\", \"success\");\n      closeCredentialsSection();\n    } catch (error) {\n      notify.show(error, \"error\");\n    }\n    setIsGlobalPreloaderShown(false);\n  }\n\n  async function handleChangePasswordClick() {\n    const validationErrors: typeof errors = {};\n\n    const currentPasswordTrimmed = currentPassword.trim();\n    const newPasswordTrimmed = newPassword.trim();\n    const confirmedNewPasswordTrimmed = confirmedNewPassword.trim();\n\n    if (!currentPasswordTrimmed) validationErrors.currentPassword = \"Required\";\n    const minPasswordLength = 8;\n    if (newPasswordTrimmed.length < minPasswordLength)\n      validationErrors.newPassword = `New password must be at least ${minPasswordLength} characters`;\n    if (!newPasswordTrimmed) validationErrors.newPassword = \"Required\";\n    if (confirmedNewPasswordTrimmed !== newPasswordTrimmed)\n      validationErrors.confirmedNewPassword = \"Passwords do not match\";\n    if (!confirmedNewPasswordTrimmed)\n      validationErrors.confirmedNewPassword = \"Required\";\n\n    if (Object.keys(validationErrors).length) {\n      setErrors(validationErrors);\n      return;\n    }\n\n    setIsGlobalPreloaderShown(true);\n    try {\n      await reAuthenticate(currentPasswordTrimmed);\n      await updatePassword(newPasswordTrimmed);\n      notify.show(\"Your password has been updated\", \"success\");\n      closeCredentialsSection();\n    } catch (error) {\n      notify.show(error, \"error\");\n    }\n    setIsGlobalPreloaderShown(false);\n  }\n\n  function closeCredentialsSection() {\n    setCurrentPassword(\"\");\n    setNewEmail(\"\");\n    setNewPassword(\"\");\n    setConfirmedNewPassword(\"\");\n  }\n\n  async function handleClickReportsButton() {\n    setIsGlobalPreloaderShown(true);\n    try {\n      await updateIsUserReportReceiver();\n      notify.show(\"Your changes have been saved\", \"success\");\n    } catch (error) {\n      console.dir(error);\n      notify.show(\"Oops, something went wrong\", \"error\");\n    }\n    setIsGlobalPreloaderShown(false);\n  }\n\n  return (\n    <div className={styles.profile}>\n      <div className={styles.title}>Your profile</div>\n      <div className={styles.content}>\n        <form className={styles.section}>\n          <div className={styles.sectionTitle}>Personal information</div>\n          <ProfileIcon className={styles.profileIcon} />\n          <div className={styles.userName}>\n            {firstName} {lastName}\n          </div>\n          <div className={styles.email}>{email}</div>\n          <div>\n            <div className={styles.label}>My company</div>\n            <Input\n              className={styles.input}\n              value={company}\n              changeHandler={(value) => {\n                setCompany(value);\n                handleInputChange({ company: value });\n              }}\n            />\n          </div>\n          <div>\n            <div className={styles.label}>Title</div>\n            <Input\n              className={styles.input}\n              value={title}\n              changeHandler={(value) => {\n                setTitle(value);\n                handleInputChange({ title: value });\n              }}\n            />\n          </div>\n          <div>\n            <div className={styles.label}>Branch</div>\n            <Input\n              className={styles.input}\n              value={branch}\n              changeHandler={(value) => {\n                setBranch(value);\n                handleInputChange({ branch: value });\n              }}\n            />\n          </div>\n          <div>\n            <div className={styles.label}>Market</div>\n            <Input\n              className={styles.input}\n              value={market}\n              changeHandler={(value) => {\n                setMarket(value);\n                handleInputChange({ market: value });\n              }}\n            />\n          </div>\n          <div>\n            <div className={styles.label}>Phone</div>\n            <Input\n              className={styles.input}\n              value={phone}\n              changeHandler={(value) => {\n                setPhone(value);\n                handleInputChange({ phone: value });\n              }}\n            />\n          </div>\n        </form>\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>Credentials</div>\n          <div className={styles.text}>\n            In order to change your email or password, enter your current\n            password:\n          </div>\n          <div>\n            <div className={styles.label}>Current password</div>\n            <InputWithError\n              className={styles.input}\n              type=\"password\"\n              value={currentPassword}\n              changeHandler={(value) => setCurrentPassword(value)}\n              error={errors.currentPassword}\n            />\n          </div>\n          <div className={styles.divider} />\n          <div>\n            <div className={styles.label}>New email</div>\n            <InputWithError\n              className={styles.input}\n              type=\"email\"\n              value={newEmail}\n              changeHandler={(value) => setNewEmail(value)}\n              error={errors.newEmail}\n            />\n          </div>\n          <button className={styles.button} onClick={handleChangeEmailClick}>\n            Change my email\n          </button>\n          <div className={styles.divider} />\n          <div>\n            <div className={styles.label}>New password</div>\n            <InputWithError\n              className={styles.input}\n              type=\"password\"\n              value={newPassword}\n              changeHandler={(value) => setNewPassword(value)}\n              error={errors.newPassword}\n            />\n          </div>\n          <div>\n            <div className={styles.label}>Re-ender your new password</div>\n            <InputWithError\n              className={styles.input}\n              type=\"password\"\n              value={confirmedNewPassword}\n              changeHandler={(value) => setConfirmedNewPassword(value)}\n              error={errors.confirmedNewPassword}\n            />\n          </div>\n          <button className={styles.button} onClick={handleChangePasswordClick}>\n            Change my password\n          </button>\n        </div>\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>Monthly reports</div>\n          <div className={styles.text}>\n            Your monthly reports are{\" \"}\n            {isUserReportReceiver ? \"enabled\" : \"disabled\"} now\n          </div>\n          <button className={styles.button} onClick={handleClickReportsButton}>\n            {isUserReportReceiver ? \"Disable reports\" : \"Enable reports\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ user }: Store.State) => ({\n  firstName: user.firstName,\n  lastName: user.lastName,\n  company: user.company,\n  title: user.title,\n  branch: user.branch,\n  market: user.market,\n  email: user.email,\n  phone: user.phone,\n  isUserReportReceiver: user.isReportReceiver,\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  updateUserProfileSettings: (settings: any) =>\n    dispatch(actions.updateUserProfileSettings(settings)),\n  reAuthenticate: (password: string) =>\n    dispatch(actions.reAuthenticate(password)),\n  updateEmail: (email: string) => dispatch(actions.updateEmail(email)),\n  updatePassword: (password: string) =>\n    dispatch(actions.updatePassword(password)),\n  updateIsUserReportReceiver: () =>\n    dispatch(actions.updateIsUserReportReceiver()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\n"],"sourceRoot":""}